generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  balance      Float         @default(0)
  btcWallet    BtcWallet?
  solWallet    SolWallet?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  transactions Transaction[]
  diceRounds   DiceRound[] // âœ… opposite side of relation
}

model Transaction {
  id        Int      @id @default(autoincrement())
  amount    Float
  currency  String
  type      String
  status    String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
}

model BtcWallet {
  id        Int       @id @default(autoincrement())
  address   String    @unique
  user      User      @relation(fields: [userId], references: [id])
  userId    Int       @unique
  balance   Float     @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model SolWallet {
  userId  Int    @id
  user    User   @relation(fields: [userId], references: [id])
  address String
  balance Float  @default(0)
}

model Price {
  id        Int      @id @default(autoincrement())
  symbol    String   @unique
  usdPrice  Float
  updatedAt DateTime @updatedAt
}

model DiceRound {
  id             String   @id @default(cuid())
  userId         Int?
  user           User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  bet            Float
  mode           String
  chance         Float
  clientSeed     String
  nonce          Int
  serverSeed     String
  serverSeedHash String
  currency       String // "BTC" | "SOL"
  createdAt      DateTime @default(now())

  @@unique([userId, clientSeed, nonce])
  @@index([userId, clientSeed, createdAt])
}
