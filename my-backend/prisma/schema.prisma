// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  email          String           @unique
  password       String
  username       String?          @unique
  balance        Float            @default(0)
  btcWallet      BtcWallet?
  solWallet      SolWallet?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  transactions   Transaction[]
  diceRounds     DiceRound[]
  MinesRound     MinesRound[]
  LimboRound     LimboRound[]
  BlackjackRound BlackjackRound[]
  BaccaratRound  BaccaratRound[]
  OAuthAccount   OAuthAccount[]
  PlinkoRound    PlinkoRound[]
}

model Transaction {
  id        Int      @id @default(autoincrement())
  amount    Float
  currency  String
  type      String
  status    String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
}

model BtcWallet {
  id        Int       @id @default(autoincrement())
  address   String    @unique
  user      User      @relation(fields: [userId], references: [id])
  userId    Int       @unique
  balance   Float     @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model SolWallet {
  userId  Int    @id
  user    User   @relation(fields: [userId], references: [id])
  address String
  balance Float  @default(0)
}

model Price {
  id        Int      @id @default(autoincrement())
  symbol    String   @unique
  usdPrice  Float
  updatedAt DateTime @updatedAt
}

model DiceRound {
  id             String   @id @default(cuid())
  userId         Int?
  user           User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  bet            Float
  mode           String
  chance         Float
  clientSeed     String
  nonce          Int
  serverSeed     String
  serverSeedHash String
  currency       String
  createdAt      DateTime @default(now())

  @@unique([userId, clientSeed, nonce])
  @@index([userId, clientSeed, createdAt])
}

model MinesRound {
  id     String @id @default(cuid())
  userId Int?
  user   User?  @relation(fields: [userId], references: [id], onDelete: SetNull)

  bet            Float
  currency       String
  mines          Int
  clientSeed     String
  nonce          Int
  serverSeed     String
  serverSeedHash String
  status         String   @default("live")
  safeRevealed   Int      @default(0)
  revealed       Int[]    @default([])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([userId, clientSeed, nonce])
  @@index([userId, clientSeed, createdAt])
}

model LimboRound {
  id     String @id @default(cuid())
  userId Int?
  user   User?  @relation(fields: [userId], references: [id], onDelete: SetNull)

  bet            Float
  target         Float
  resultMult     Float?
  clientSeed     String
  nonce          Int
  serverSeed     String
  serverSeedHash String
  currency       String
  createdAt      DateTime @default(now())

  @@unique([userId, clientSeed, nonce])
  @@index([userId, clientSeed, createdAt])
}

model BlackjackRound {
  id     String @id @default(cuid())
  userId Int?
  user   User?  @relation(fields: [userId], references: [id], onDelete: SetNull)

  bet            Float
  currency       String
  clientSeed     String
  nonce          Int
  serverSeed     String
  serverSeedHash String
  state          Json
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([userId, clientSeed, nonce])
  @@index([userId, clientSeed, createdAt])
}

model BaccaratRound {
  id     String @id @default(cuid())
  userId Int?
  user   User?  @relation(fields: [userId], references: [id], onDelete: SetNull)

  currency       String
  clientSeed     String
  nonce          Int
  serverSeed     String
  serverSeedHash String

  totalBet  Float @default(0)
  betPlayer Float @default(0)
  betBanker Float @default(0)
  betTie    Float @default(0)

  state     Json
  createdAt DateTime @default(now())

  @@unique([userId, clientSeed, nonce])
  @@index([userId, clientSeed, createdAt])
}

model OAuthAccount {
  id         Int      @id @default(autoincrement())
  provider   String
  providerId String   @unique
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
}

model PlinkoRound {
  id     String @id @default(cuid())
  userId Int?
  user   User?  @relation(fields: [userId], references: [id], onDelete: SetNull)

  bet            Float
  currency       String
  clientSeed     String
  nonce          Int
  serverSeed     String
  serverSeedHash String

  params    Json?
  state     Json?
  createdAt DateTime @default(now())

  @@unique([userId, clientSeed, nonce])
  @@index([userId, clientSeed, createdAt])
}
